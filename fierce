#!/usr/bin/perl

#########################################
# Fierce v0.9.9 - Beta 03/24/2007
# By RSnake http://ha.ckers.org/fierce/
# Threading and additions by IceShaman
# Modern Perl by chinarulezzz
#########################################

use strict;
use warnings;
use diagnostics;

use File::Basename;
use Net::hostent;
use Net::DNS;
use IO::Socket;
use Socket;
use Getopt::Long;

# command line default options
my %cmdopt = (
  delay       => 0,
  tcp_timeout => 10,
  traverse    => 5,
);

# command line options
my @dns_servers;
my @common_cnames;
my $count_hostnames = 0;
my @domain_ns;
my $h;
my @ip_and_hostname;
my $logging;
my $res = Net::DNS::Resolver->new;
my $search_found;
my %subnets;
my %tested_names;
my $this_ip;
my $program     = basename $0;
my $version_num = 'Version 0.9.9 - Beta 03/24/2007';
my $webservers  = 0;
my $wildcard_dns;
my @wildcards;
my @zone;
my $class_c;
my $count = 0;
my %known_ips;
my %known_names;
my @output;
my @thread;
my $thread_support;

# ignore all errors while trying to load up thead stuff
#BEGIN {
#  $SIG{__DIE__}  = sub { };
#  $SIG{__WARN__} = sub { };
#}

# try and load thread modules, if it works import their functions
BEGIN {
  eval {
    require threads;
    require threads::shared;
    require Thread::Queue;
    $thread_support = 1;
  };
  if ($@) {    # got errors, no ithreads :(
    $thread_support = 0;
  }
  else {       # safe to haul in the threadding functions
    import threads;
    import threads::shared;
    import Thread::Queue;
  }
}

# turn errors back on
BEGIN {
  $SIG{__DIE__}  = 'DEFAULT';
  $SIG{__WARN__} = 'DEFAULT';
}

my $result = GetOptions(
  'dns=s'        => \$cmdopt{dns},
  'file=s'       => \$cmdopt{filename},
  'suppress'     => \$cmdopt{suppress},
  'help'         => \$cmdopt{help},
  'connect=s'    => \$cmdopt{http_connect},
  'range=s'      => \$cmdopt{range},
  'wide'         => \$cmdopt{wide},
  'delay=i'      => \$cmdopt{delay},
  'dnsfile=s'    => \$cmdopt{dns_file},
  'dnsserver=s'  => \$cmdopt{dns_server},
  'version'      => \$cmdopt{version},
  'search=s'     => \$cmdopt{search},
  'wordlist=s'   => \$cmdopt{wordlist},
  'fulloutput'   => \$cmdopt{full_output},
  'nopattern'    => \$cmdopt{nopattern},
  'tcptimeout=i' => \$cmdopt{tcp_timeout},
  'traverse=i'   => \$cmdopt{traverse},
  'threads=i'    => \$cmdopt{threads},
);

&help                    if $cmdopt{help};
quit_early($version_num) if $cmdopt{version};

if (!$cmdopt{dns} && !$cmdopt{range}) {
  output("You have to use the -dns switch with a domain after it.");
  quit_early("Type: $program -h for help");
}
elsif ($cmdopt{dns} && $cmdopt{dns} !~ /[a-z\d.-]\.[a-z]*/i) {
  output("\n\tUhm, no. \"$cmdopt{dns}\" is gimp. "
      . "A bad domain can mess up your day. ");
  quit_early("\tTry again.");
}

if ($cmdopt{filename} && $cmdopt{filename} ne '') {
  $logging = 1;
  if (-e $cmdopt{filename}) {
    print "File already exists, do you want to overwrite it? [Y|N] ";
    chomp(my $overwrite = <STDIN>);
    if ($overwrite eq 'y' || $overwrite eq 'Y') {
      open FILE, '>', $cmdopt{filename}
        or
        quit_early("Having trouble opening $cmdopt{filename} anyway");
    }
    else {
      quit_early('Okay, giving up');
    }
  }
  else {
    open FILE, '>', $cmdopt{filename}
      or quit_early("Having trouble opening $cmdopt{filename}");
  }
  output('Now logging to ' . $cmdopt{filename});
}

if ($cmdopt{http_connect}) {
  unless (-e $cmdopt{http_connect}) {
    open(HEADERS, "$cmdopt{http_connect}")
      or quit_early("Having trouble opening $cmdopt{http_connect}");
    close HEADERS;
  }
}

# if user doesn't provide a number, they both end up at 0
quit_early('Your delay tag must be a positive integer')
  if ($cmdopt{delay}
  && $cmdopt{delay} != 0
  && $cmdopt{delay} !~ /^\d*$/);

quit_early('Your thread tag must be a positive integer')
  if ($cmdopt{threads}
  && $cmdopt{threads} != 0
  && $cmdopt{threads} !~ /^\d*$/);

if ($cmdopt{threads} && !$thread_support) {
  quit_early('Perl is not configured to support ithreads');
}

if ($cmdopt{dns_file}) {
  open(DNSFILE, '<', $cmdopt{dns_file})
    or quit_early("Can't open $cmdopt{dns_file}");
  for (<DNSFILE>) {
    chomp;
    push @dns_servers, $_;
  }
  if (@dns_servers) {
    output("Using DNS servers from $cmdopt{dns_file}");
  }
  else {
    output(
      "DNS file $cmdopt{dns_file} is empty, using default options");
  }
}

if ($cmdopt{full_output} && !$cmdopt{http_connect}) {
  output("Warning: you selected the -fulloutput option but didn't use");
  output(
    "-connect.\n\tNot sure what to do with that, so continuing...");
}

if ($cmdopt{suppress} && !$cmdopt{filename}) {
  quit_early(
    "You need to use the -s switch with the -f switch.\n
             . Otherwise all will perish..."
  );
}

if ($cmdopt{tcp_timeout}) {
  $res->tcp_timeout($cmdopt{tcp_timeout});
}
else {
  $res->tcp_timeout(10);
}

if ($cmdopt{range}) {
  $cmdopt{nopattern} = 1;
  quit_early('-range must be combined with -dnsserver',
    $logging, $cmdopt{suppress})
    if !$cmdopt{dns_server};
  $res->nameservers($cmdopt{dns_server});
  find_nearby($cmdopt{range});
  exit;
}

if ($cmdopt{traverse}) {
  quit_early('The -t flag must contain an integer 0-255')
    if $cmdopt{traverse} !~ /\d/;
  quit_early('The -t flag must contain an integer 0-255')
    if $cmdopt{traverse} < 0 || $cmdopt{traverse} > 255;
}

my @search_strings = split(/\x2C/, $cmdopt{search}) if $cmdopt{search};
my $query          = $res->query($cmdopt{dns}, 'NS');

if ($query) {
  output("DNS Servers for $cmdopt{dns}");
  foreach my $rr (grep { $_->type eq 'NS' } $query->answer) {
    my $dnssrv = $rr->nsdname;
    output("\t$dnssrv");
    push(@domain_ns, $rr->nsdname);
  }
}

output("\nTrying zone transfer first...");

if ($cmdopt{dns_server}) {
  @zone = $res->axfr($cmdopt{dns});
}
else {
  for (@domain_ns) {
    $res->nameservers($_);
    output("\tTesting $_");
    @zone = $res->axfr($cmdopt{dns});
    output("\t\t" . $res->errorstring)
      if $res->errorstring ne 'NOERROR';
    @zone
      ? last
      : output("\t\tRequest timed out or transfer not allowed.");
  }
}

$res->nameservers($cmdopt{dns_server} || @domain_ns);

# DNS server gave us everything so we don't have to guess
if (@zone) {
  output("\nWhoah, it worked - misconfigured DNS server found:");
  output($_->string) for @zone;
  quit_early(
        "\nThere isn't much point continuing, you have everything.\n"
      . "Have a nice day.");
}
elsif ($cmdopt{dns}) {
  output("\nUnsuccessful in zone transfer (it was worth a shot)");
  output("Okay, trying the good old fashioned way... brute force");
  $cmdopt{wordlist} = $cmdopt{wordlist} || 'hosts.txt';
  if (-e $cmdopt{wordlist}) {

    # user provided or default
    open(WORDLIST, '<', $cmdopt{wordlist})
      or open(WORDLIST, '<', 'hosts.txt')
      or quit_early(
      "Can't open $cmdopt{wordlist} or the default wordlist");
    for (<WORDLIST>) {
      chomp;
      push @common_cnames, $_;
    }
    close WORDLIST;
  }
  else {
    quit_early("Can't open $cmdopt{wordlist} or the default wordlist");
  }
  output("\nChecking for wildcard DNS...");
  srand;
  $wildcard_dns = 1e11 - int(rand(1e10));
  if ($h = gethost("$wildcard_dns.$cmdopt{dns}")) {
    my $wildcard_addr = inet_ntoa($h->addr);
    output("\t** Found $wildcard_dns.$cmdopt{dns} at $wildcard_addr.");
    output("\t** High probability of wildcard DNS.");
    $wildcard_dns = $wildcard_addr;
  }
  else {
    output('Nope. Good.');
    $wildcard_dns = q{};
  }
  my $total_cnames = @common_cnames;
  output("Now performing $total_cnames test(s)...");
  if ($cmdopt{threads}) {
    share($count);
    share(%known_ips);
    share(%known_names);
    share(@output);
    my $stream = new Thread::Queue;
    foreach my $host (@common_cnames) {
      $stream->enqueue("$host.$cmdopt{dns}");
    }
    for (0 .. $cmdopt{threads}) {
      my $kid = new threads(\&search_host, $stream);
      $stream->enqueue(undef);    #for each thread
    }
    foreach my $thread (threads->list) {
      $thread->join
        if ($thread->tid && !threads::equal($thread, threads->self));
    }
  }
  else {
    foreach my $host (@common_cnames) {
      search_host("$host.$cmdopt{dns}");
    }
  }

  # write to file any output generated by child threads
  print FILE for @output;
}

foreach my $current_name (sort keys(%known_names)) {
  @ip_and_hostname = split(/\x2C/, $current_name);
  my @bytes = split(/\x2E/, $ip_and_hostname[0]);
  if ($subnets{"$bytes[0].$bytes[1].$bytes[2]"}) {
    $subnets{"$bytes[0].$bytes[1].$bytes[2]"}++;
  }
  else {
    $subnets{"$bytes[0].$bytes[1].$bytes[2]"} = 1;
  }
}

output(
  "\nSubnets found (may want to probe here using nmap or unicornscan):"
);

foreach my $athroughc (sort keys(%subnets)) {
  $count_hostnames += $subnets{$athroughc};
  output("\t$athroughc.0-255 : $subnets{$athroughc} hostnames found.");
}

&http_connect if $cmdopt{http_connect};

output("\nDone with Fierce scan: http://ha.ckers.org/fierce/\n"
    . "Found $count entries.\n"
    . ($cmdopt{http_connect} ? "and $webservers webservers." : ""));

output('Have a nice day.');
close FILE if $logging;

# subs
sub set_nameservers {
  my $res = shift;
  my @servers;
  push @servers, @dns_servers        if @dns_servers;
  push @servers, $cmdopt{dns_server} if $cmdopt{dns_server};
  push @servers, @domain_ns          if !@servers;
  $$res->nameservers(@servers);
}

sub search_host {
  sleep $cmdopt{delay};
  my $upstream;
  my $tid;
  my $resbf;
  if ($cmdopt{threads} && threads->self->tid()) {
    $upstream = shift;
    $tid      = threads->self->tid();
    $resbf    = Net::DNS::Resolver->new;
    set_nameservers(\$resbf);
  }
  else {
    $resbf = $res;
  }

  # only runs once if not threaded
  while (my $search_item =
    $cmdopt{threads} ? $upstream->dequeue : shift)
  {
    next unless my $packet = $resbf->search($search_item);
    foreach my $answer ($packet->answer) {
      my @name = split(/\t/, $answer->string);
      next unless ($name[3] eq 'A' || $name[3] eq 'PTR');
      chop $name[0];
      if ($name[4] eq $wildcard_dns) {
        $this_ip = $name[4];
        find_nearby($this_ip) if !$known_ips{$this_ip};
        $known_ips{$answer->address} = 1;
        push @wildcards,
          "$wildcard_dns\t$search_item";    #may do something later
        next;
      }

      $this_ip = $name[4];
      find_nearby($this_ip) if !$known_ips{$this_ip};
      $known_ips{$this_ip} = 1;
      next if $known_names{"$this_ip,$search_item"};
      $count++;
      $known_names{"$this_ip,$search_item"} = 1;
      output("$this_ip\t$search_item");
    }
  }
}

sub find_nearby {
  my $lowest;
  my $highest;
  my @octet;
  my $res = $res;    # local copy so threads aren't waiting for others
  @octet = split(/\x2E/, shift);
  if ($cmdopt{wide}) {
    ($lowest, $highest) = (0, 255);
  }
  else {             # user provided range
    if ($octet[3] =~ /(\d*)-(\d*)/) {
      ($lowest, $highest) = ($1, $2);
      quit_early("Your range doesn't make sense, try again")
        if $highest < $lowest;
    }
    else {           # automatic call
      $lowest =
        $octet[3] < $cmdopt{traverse}
        ? 0
        : $octet[3] - $cmdopt{traverse};

      $highest =
        $octet[3] > 255 - $cmdopt{traverse}
        ? 255
        : $octet[3] + $cmdopt{traverse};
    }
  }

  foreach $class_c ($lowest .. $highest) {
    sleep $cmdopt{delay};
    next if $class_c eq $octet[3];
    $octet[3] = $class_c;
    next if $known_ips{"$octet[0].$octet[1].$octet[2].$octet[3]"};
    $known_ips{"$octet[0].$octet[1].$octet[2].$octet[3]"} = 1;
    next
      unless my $packet =
      $res->search("$octet[0].$octet[1]." . "$octet[2].$octet[3]");
    foreach my $answer ($packet->answer) {
      next unless ($answer->type eq 'A' || $answer->type eq 'PTR');
      my @name = split(/\t/, $answer->string);
      chop $name[$#name];
      next if ($name[4] eq $wildcard_dns);
      if ($cmdopt{search}) {
        foreach (@search_strings) {
          if ( $name[$#name] =~ /$_/
            || $cmdopt{nopattern}
            || !$cmdopt{dns})
          {
            $count++;
            $known_names{"$octet[0].$octet[1].$octet[2].$octet[3],"
                . "$name[$#name]"} = 1;
            output(
              "$octet[0].$octet[1].$octet[2].$octet[3]\t$name[$#name]");
            find_nearby("$octet[0].$octet[1].$octet[2].$octet[3]")
              ;    # recurse
          }
        }
      }
      next if ($name[$#name] !~ /$cmdopt{dns}/ && !$cmdopt{nopattern});
      $count++;
      $known_names{"$octet[0].$octet[1].$octet[2].$octet[3],"
          . "$name[$#name]"} = 1;
      output("$octet[0].$octet[1].$octet[2].$octet[3]\t$name[$#name]");
      find_nearby("$octet[0].$octet[1].$octet[2].$octet[3]");  # recurse
    }
  }
}

sub http_connect {
  foreach my $_current_name (sort keys(%known_names)) {
    my @headers;
    my @my_headers;

    @ip_and_hostname = split(/\x2C/, $_current_name);
    my @octet = split(/\x2E/, $ip_and_hostname[0]);
    if (
      $octet[0] == 10 ||    # can't query RFC1918
      "$octet[0].$octet[1]" eq "192.168"
      || ($octet[0] == 172 && $octet[1] > 32 && $octet[1] < 15)
      || ($ip_and_hostname[0] eq "127.0.0.1")    # loopback
      )
    {
      next;
    }

    open(HEADERS, $cmdopt{http_connect})
      or quit_early(
      "Don't know why but I can't read from $cmdopt{http_connect} now");

    foreach (<HEADERS>) {
      $_ =~ s{^Host:\s*\n$}{Host: $ip_and_hostname[1]\n};
      push(@my_headers, $_);
    }
    close HEADERS;
    if ($my_headers[$#my_headers] !~ /^(\r\n)*$/) {
      $my_headers[$#my_headers + 1] = "\r\n\r\n";
    }

    #TODO: add port selection and range support
    my $socket = new IO::Socket::INET(
      PeerAddr => "$ip_and_hostname[0]",
      PeerPort => 'http(80)',
      Timeout  => 10,
      Proto    => 'tcp',
    ) or next;
    $webservers++;
    foreach (@my_headers) {
      print $socket $_;
    }
    print $socket . "\n\n";
    foreach (<$socket>) {
      unless ($_ =~ /^(\r\n)*$/) {
        push(@headers, $_);
      }
      else {
        last unless $cmdopt{full_output};
      }
    }
    output(
      "\n\nHTTP output for $ip_and_hostname[0] $ip_and_hostname[1]");
    output("\t$_") foreach @headers;
    close $socket;
  }
}

sub output {
  my $text = shift;
  if ($logging) {
    if ($cmdopt{threads} && threads->self->tid) {
      push @output, "$text\n";
    }
    else {
      print FILE "$text\n";
    }
  }
  print "$text\n" unless $cmdopt{suppress};
}

sub quit_early {
  my ($text, $logging, $suppress) = @_;
  print FILE "$text\nExiting...\n\n" if $logging;
  print "$text\nExiting...\n" unless $suppress;
  exit;
}

sub help {
  print <<EOHELP;
fierce.pl (C) Copywrite 2006,2007 - By RSnake at http://ha.ckers.org/fierce/
fierce    (C) Copywrite 2020,2021 - By chinarulezzz

  Usage: fierce [-dns example.com] [OPTIONS]

Overview:
Fierce is a semi-lightweight scanner that helps locate non-contiguous
IP space and hostnames against specified domains.  It's really meant
as a pre-cursor to nmap, unicornscan, nessus, nikto, etc, since all
of those require that you already know what IP space you are looking
for.  This does not perform exploitation and does not scan the whole
internet indiscriminately.  It is meant specifically to locate likely
targets both inside and outside a corporate network.  Because it uses
DNS primarily you will often find mis-configured networks that leak
internal address space. That's especially useful in targeted malware.

Options:
  -connect
    Attempt to make http connections to any non RFC1918 (public)
    addresses.  This will output the return headers but be warned,
    this could take a long time against a company with many targets,
    depending on network/machine lag.  I wouldn't recommend doing this
    unless it's a small company or you have a lot of free time on your
    hands (could take hours-days).  Inside the file specified the text
    "Host:\\n" will be replaced by the host specified.

    Usage:
    fierce -dns example.com -connect headers.txt

  -delay
    The number of seconds to wait between lookups.

  -dns
    The domain you would like scanned.

  -dnsfile
    Use DNS servers provided by a file (one per line) for reverse
    lookups (brute force).

  -dnsserver
    Use a particular DNS server for reverse lookups (probably should be
    the DNS server of the target).  Fierce uses your DNS server for the
    initial SOA query and then uses the target's DNS server for all
    additional queries by default.

  -file
    A file you would like to output to be logged to.

  -fulloutput
    When combined with -connect this will output everything the
    webserver sends back, not just the HTTP headers.

  -help
    This screen.

  -nopattern
    Don't use a search pattern when looking for nearby hosts.  Instead
    dump everything.  This is really noisy but is useful for finding
    other domains that spammers might be using.  It will also give you
    lots of false positives, especially on large domains.

  -range
    Scan an internal IP range (must be combined with -dnsserver).
    Note, that this does not support a pattern and will simply output
    anything it finds.

    Usage:
    fierce -range 111.222.333.0-255 -dnsserver ns1.example.com

  -search
    Search list.  When fierce attempts to traverse up and down ipspace
    it may encounter other servers within other domains that may belong
    to the same company.  If you supply a comma delimited list to
    fierce it will report anything found.  This is especially useful if
    the corporate servers are named different from the public facing
    website.

    Usage:
    fierce -dns examplecompany.com -search corpcompany,blahcompany

    Note that using search could also greatly expand the number of
    hosts found, as it will continue to traverse once it locates
    servers that you specified in your search list.  The more the
    better.

  -suppress
    Suppress all TTY output (when combined with -file).

  -tcptimeout
    Specify a different timeout (default 10 seconds).  You may want to
    increase this if the DNS server you are querying is slow or has a
    lot of network lag.

  -threads
    Specify how many threads to use while scanning (default is single
    threaded).

  -traverse
    Specify a number of IPs above and below whatever IP you have found
    to look for nearby IPs.  Default is 5 above and below.  Traverse
    will not move into other C blocks.

  -version
    Output the version number.

  -wide
    Scan the entire class C after finding any matching hostnames in
    that class C.  This generates a lot more traffic but can uncover a
    lot more information.

  -wordlist
    Use a seperate wordlist (one word per line).

    Usage:
    fierce -dns examplecompany.com -wordlist dictionary.txt
EOHELP
  exit;
}

# vim:sw=2:ts=2:sts=2:et:cc=72
# End of file
